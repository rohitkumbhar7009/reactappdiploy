{"version":3,"sources":["components/FormInput.jsx","App.jsx","index.js"],"names":["FormInput","props","_useState","useState","_useState2","_slicedToArray","focused","setFocused","label","errorMessage","onChange","inputProps","id","_objectWithoutProperties","_excluded","_jsxs","className","children","_jsx","_objectSpread","onBlur","e","onFocus","name","toString","App","username","email","birthday","password","confirmPassword","values","setValues","inputs","type","placeholder","pattern","required","_defineProperty","target","value","onSubmit","preventDefault","map","input","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"8QA4BeA,EAzBG,SAACC,GACjB,IAAAC,EAA8BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAClBI,EAAqDP,EAArDO,MAAOC,EAA8CR,EAA9CQ,aAAcC,EAAgCT,EAAhCS,SAAiBC,GAAeV,EAAtBW,GAAiBC,YAAKZ,EAAKa,IAMlE,OACEC,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBC,cAAA,SAAAD,SAAQT,IACRU,cAAA,QAAAC,wBAAA,GACMR,GAAU,IACdD,SAAUA,EACVU,OAVc,SAACC,GACnBd,GAAW,IAUPe,QAAS,iBACa,oBAApBX,EAAWY,MAA8BhB,GAAW,IAEtDD,QAASA,EAAQkB,cAEnBN,cAAA,QAAAD,SAAOR,QCmEEgB,EAtFH,WACV,IAAAvB,EAA4BC,mBAAS,CACnCuB,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,gBAAiB,KACjB1B,EAAAC,YAAAH,EAAA,GANK6B,EAAM3B,EAAA,GAAE4B,EAAS5B,EAAA,GAQlB6B,EAAS,CACb,CACErB,GAAI,EACJW,KAAM,WACNW,KAAM,OACNC,YAAa,WACb1B,aACE,kFACFD,MAAO,WACP4B,QAAS,sBACTC,UAAU,GAEZ,CACEzB,GAAI,EACJW,KAAM,QACNW,KAAM,QACNC,YAAa,QACb1B,aAAc,sCACdD,MAAO,QACP6B,UAAU,GAEZ,CACEzB,GAAI,EACJW,KAAM,WACNW,KAAM,OACNC,YAAa,WACb3B,MAAO,YAET,CACEI,GAAI,EACJW,KAAM,WACNW,KAAM,WACNC,YAAa,WACb1B,aACE,sGACFD,MAAO,WACP4B,QAAQ,uEACRC,UAAU,GAEZ,CACEzB,GAAI,EACJW,KAAM,kBACNW,KAAM,WACNC,YAAa,mBACb1B,aAAc,yBACdD,MAAO,mBACP4B,QAASL,EAAOF,SAChBQ,UAAU,IAQR3B,EAAW,SAACW,GAChBW,EAASb,wBAAC,GAAKY,GAAM,GAAAO,YAAA,GAAGjB,EAAEkB,OAAOhB,KAAOF,EAAEkB,OAAOC,UAGnD,OACEtB,cAAA,OAAKF,UAAU,MAAKC,SAClBF,eAAA,QAAM0B,SAVW,SAACpB,GACpBA,EAAEqB,kBAS6BzB,SAAA,CAC3BC,cAAA,MAAAD,SAAI,aACHgB,EAAOU,KAAI,SAACC,GAAK,OAChB1B,cAAClB,EAASmB,wBAAA,GAEJyB,GAAK,IACTJ,MAAOT,EAAOa,EAAMrB,MACpBb,SAAUA,IAHLkC,EAAMhC,OAMfM,cAAA,UAAAD,SAAQ,iBChFhB4B,IAASC,OACP5B,cAAC6B,IAAMC,WAAU,CAAA/B,SACfC,cAACO,EAAG,MAENwB,SAASC,eAAe,W","file":"static/js/main.cb68027c.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./formInput.css\";\n\nconst FormInput = (props) => {\n  const [focused, setFocused] = useState(false);\n  const { label, errorMessage, onChange, id, ...inputProps } = props;\n\n  const handleFocus = (e) => {\n    setFocused(true);\n  };\n\n  return (\n    <div className=\"formInput\">\n      <label>{label}</label>\n      <input\n        {...inputProps}\n        onChange={onChange}\n        onBlur={handleFocus}\n        onFocus={() =>\n          inputProps.name === \"confirmPassword\" && setFocused(true)\n        }\n        focused={focused.toString()}\n      />\n      <span>{errorMessage}</span>\n    </div>\n  );\n};\n\nexport default FormInput;\n","import { useState } from \"react\";\nimport \"./app.css\";\nimport FormInput from \"./components/FormInput\";\n\nconst App = () => {\n  const [values, setValues] = useState({\n    username: \"\",\n    email: \"\",\n    birthday: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const inputs = [\n    {\n      id: 1,\n      name: \"username\",\n      type: \"text\",\n      placeholder: \"Username\",\n      errorMessage:\n        \"Username should be 3-16 characters and shouldn't include any special character!\",\n      label: \"Username\",\n      pattern: \"^[A-Za-z0-9]{3,16}$\",\n      required: true,\n    },\n    {\n      id: 2,\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      errorMessage: \"It should be a valid email address!\",\n      label: \"Email\",\n      required: true,\n    },\n    {\n      id: 3,\n      name: \"birthday\",\n      type: \"date\",\n      placeholder: \"Birthday\",\n      label: \"Birthday\",\n    },\n    {\n      id: 4,\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      errorMessage:\n        \"Password should be 8-20 characters and include at least 1 letter, 1 number and 1 special character!\",\n      label: \"Password\",\n      pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,20}$`,\n      required: true,\n    },\n    {\n      id: 5,\n      name: \"confirmPassword\",\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      errorMessage: \"Passwords don't match!\",\n      label: \"Confirm Password\",\n      pattern: values.password,\n      required: true,\n    },\n  ];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  const onChange = (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className=\"app\">\n      <form onSubmit={handleSubmit}>\n        <h1>Register</h1>\n        {inputs.map((input) => (\n          <FormInput\n            key={input.id}\n            {...input}\n            value={values[input.name]}\n            onChange={onChange}\n          />\n        ))}\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}